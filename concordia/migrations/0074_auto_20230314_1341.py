# Generated by Django 3.2.18 on 2023-03-14 13:41

from django.conf import settings
from django.db import migrations
from django.db.models import Q


def populate_user_activity_table(apps, schema_editor):
    Campaign = apps.get_model("concordia", "Campaign")
    Tag = apps.get_model("concordia", "Tag")
    Transcription = apps.get_model("concordia", "Transcription")
    User = apps.get_model(*settings.AUTH_USER_MODEL.split("."))
    UserAssetTagCollection = apps.get_model("concordia", "UserAssetTagCollection")
    UserProfileActivity = apps.get_model("concordia", "UserProfileActivity")
    for campaign in Campaign.objects.all():
        transcriptions = Transcription.objects.filter(
            asset__item__project__campaign=campaign
        )
        reviewer_ids = transcriptions.values_list("reviewed_by", flat=True).distinct()
        transcriber_ids = transcriptions.values_list("user", flat=True).distinct()
        user_ids = list(set(list(reviewer_ids) + list(transcriber_ids)))
        tag_collections = UserAssetTagCollection.objects.filter(
            asset__item__project__campaign=campaign
        )
        UserProfileActivity.objects.bulk_create(
            [
                UserProfileActivity(
                    user=user,
                    campaign=campaign,
                    asset_count=transcriptions.filter(
                        Q(reviewed_by=user) | Q(user=user)
                    )
                    .distinct()
                    .count(),
                    asset_tag_count=Tag.objects.filter(
                        userassettagcollection__in=tag_collections.filter(user=user)
                    )
                    .distinct()
                    .count(),
                    transcribe_count=transcriptions.filter(Q(user=user))
                    .distinct()
                    .count(),
                    review_count=transcriptions.filter(Q(reviewed_by=user))
                    .distinct()
                    .count(),
                )
                for user in User.objects.filter(id__in=user_ids)
            ]
        )


def reverse_func(apps, schema_editor):
    # reverse_func() should delete instances.
    UserProfileActivity = apps.get_model("concordia", "UserProfileActivity")
    db_alias = schema_editor.connection.alias
    UserProfileActivity.objects.using(db_alias).all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("concordia", "0073_auto_20230314_1327"),
    ]

    operations = [
        migrations.RunPython(populate_user_activity_table, reverse_func),
    ]
