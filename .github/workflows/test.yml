name: Test

on:
    workflow_dispatch:
    push:
        branches: [release]
        paths-ignore:
            - docs/**
            - README.md
            - .github/**
            - cloudformation/**
            - db_scripts/**
            - jenkins/**
            - kibana-proxy/**
            - postgresql/**

    pull_request:
        branches: [main, 'feature-*']
        paths-ignore:
            - docs/**
            - README.md
            - .github/**
            - cloudformation/**
            - db_scripts/**
            - jenkins/**
            - kibana-proxy/**
            - postgresql/**

env:
    PIPENV_IGNORE_VIRTUALENVS: 1
    DJANGO_SETTINGS_MODULE: concordia.settings_test

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            # Label used to access the service container
            postgres:
                # Docker Hub image
                image: postgres
                # Provide the password for postgres
                env:
                    POSTGRES_DB: concordia
                    POSTGRES_PASSWORD: postgres
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    # Maps tcp port 5432 on service container to the host
                    - 5432:5432

            # Label used to access the service container
            redis:
                # Docker Hub image
                image: redis
                # Set health checks to wait until redis has started
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    # Opens tcp port 6379 on the host and service container
                    - 6379:6379

        steps:
            - name: Install system packages
              run: |
                  sudo apt-get update -qy && sudo apt-get dist-upgrade -qy && sudo apt-get install -qy \
                  libmemcached-dev libz-dev libfreetype6-dev libtiff-dev \
                  libjpeg-dev libopenjp2-7-dev libwebp-dev zlib1g-dev libpq-dev \
                  tesseract-ocr tesseract-ocr-all

            - name: Install node and npm
              uses: actions/setup-node@v4
              with:
                  node-version: '18'

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.10
              uses: actions/setup-python@v5
              with:
                  python-version: '3.10'
                  architecture: 'x64'
                  cache: 'pipenv'

            - name: Display Python version
              run: python -c "import sys; print(sys.version)"

            - name: Install Python Dependencies
              run: |
                  python3 -m pip install --upgrade pip
                  pip3 install -U packaging
                  pip3 install -U setuptools
                  pip3 install -U pipenv
                  pipenv install --dev --deploy

            - name: Run Tests with Coverage
              run: |
                  mkdir logs
                  touch ./logs/concordia-celery.log
                  npm install
                  npx gulp build
                  chromepath=$(npx @puppeteer/browsers install chrome@stable)
                  chromepath=${chromepath#* }
                  chromepath=${chromepath%/chrome}
                  OLDPATH=$PATH
                  PATH=$PATH:$chromepath
                  pipenv run ./manage.py collectstatic --no-input
                  pipenv run coverage run --parallel-mode ./manage.py test --parallel
                  pipenv run coverage combine
                  pipenv run coverage report
                  pipenv run coverage report | grep 'TOTAL' | awk '{print $4}' | tr -d '%' > pr_coverage.txt
                  PATH=$OLDPATH
              env:
                  PGPASSWORD: postgres
                  # The hostname used to communicate with the PostgreSQL service container
                  POSTGRES_HOST: localhost
                  # The default PostgreSQL port
                  POSTGRES_PORT: 5432
                  # The hostname used to communicate with the Redis service container
                  REDIS_HOST: localhost
                  # The default Redis port
                  REDIS_PORT: 6379
                  # COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}

            - name: Upload PR Coverage Report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: pr_coverage.txt

            # Store coverage results if running on the release branch
            - name: Store Release Coverage (if running on release branch)
              if: github.ref == 'refs/heads/release'
              run: |
                  mv pr_coverage.txt coverage.txt

            - name: Upload Release Coverage (if running on release branch)
              if: github.ref == 'refs/heads/release'
              uses: actions/upload-artifact@v4
              with:
                  name: release-coverage
                  path: coverage.txt

            # Download the stored release branch coverage for PR comparison
            - name: Download Release Coverage (if running on PR)
              if: github.event_name == 'pull_request'
              uses: actions/download-artifact@v4
              with:
                  name: release-coverage
                  path: .

            # Compare PR coverage against stored release coverage
            - name: Compare Coverage (if running on PR)
              if: github.event_name == 'pull_request'
              run: |
                  PR_COVERAGE=$(cat pr_coverage.txt)
                  if [ -f "coverage.txt" ]; then
                      RELEASE_COVERAGE=$(cat coverage.txt)
                      COMPARISON_AVAILABLE=true
                  else
                      COMPARISON_AVAILABLE=false
                      RELEASE_COVERAGE="N/A"
                  fi

                  if [ "$COMPARISON_AVAILABLE" = true ]; then
                      if (( $(echo "$PR_COVERAGE > $RELEASE_COVERAGE" | bc -l) )); then
                          CHANGE="🔼 Coverage increased (+$(echo "$PR_COVERAGE - $RELEASE_COVERAGE" | bc -l)%)!"
                      elif (( $(echo "$PR_COVERAGE < $RELEASE_COVERAGE" | bc -l) )); then
                          CHANGE="🔽 Coverage decreased (-$(echo "$RELEASE_COVERAGE - $PR_COVERAGE" | bc -l)%)!"
                      else
                          CHANGE="✅ Coverage remained the same."
                      fi
                  else
                      CHANGE="⚠️ No baseline coverage available from 'release' branch."
                  fi

                  echo "COVERAGE_CHANGE=$CHANGE" >> $GITHUB_ENV
                  echo "RELEASE_COVERAGE=$RELEASE_COVERAGE" >> $GITHUB_ENV

            # Display the coverage summary in the GitHub Actions UI
            - name: Post Coverage Summary
              run: |
                  echo "### 🛡 Test Coverage Report 🛡" >> $GITHUB_STEP_SUMMARY
                  echo "**Current PR Coverage:** ${{ env.PR_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
                  echo "**Release Branch Coverage:** $RELEASE_COVERAGE%" >> $GITHUB_STEP_SUMMARY
                  echo "**Result:** ${{ env.COVERAGE_CHANGE }}" >> $GITHUB_STEP_SUMMARY

            # Post a comment on the PR with the coverage results
            - name: Comment Coverage Change on PR
              if: github.event_name == 'pull_request'
              uses: mshick/add-pr-comment@v2
              with:
                  message: |
                      **🛡 Test Coverage Report 🛡**
                      - **Current PR Coverage:** ${{ env.PR_COVERAGE }}%
                      - **Release Branch Coverage:** $RELEASE_COVERAGE%
                      - **${{ env.COVERAGE_CHANGE }}**
