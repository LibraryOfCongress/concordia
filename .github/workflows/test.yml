name: Test

on:
    workflow_dispatch:
    push:
        branches: [release]
        paths-ignore:
            - docs/**
            - README.md
            - .github/**
            - cloudformation/**
            - db_scripts/**
            - jenkins/**
            - kibana-proxy/**
            - postgresql/**

    pull_request:
        branches: [main, 'feature-*']
        paths-ignore:
            - docs/**
            - README.md
            - .github/**
            - cloudformation/**
            - db_scripts/**
            - jenkins/**
            - kibana-proxy/**
            - postgresql/**

env:
    PIPENV_IGNORE_VIRTUALENVS: 1
    DJANGO_SETTINGS_MODULE: concordia.settings_test

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            # Label used to access the service container
            postgres:
                # Docker Hub image
                image: postgres
                # Provide the password for postgres
                env:
                    POSTGRES_DB: concordia
                    POSTGRES_PASSWORD: postgres
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    # Maps tcp port 5432 on service container to the host
                    - 5432:5432

        steps:
            - name: Remove Browsers and chromedriver
              run: sudo apt-get purge firefox google-chrome-stable chromium-browser chromedriver

            - name: Install system packages
              run: |
                  sudo apt-get update -qy && sudo apt-get dist-upgrade -qy && sudo apt-get install -qy \
                  libmemcached-dev libz-dev libfreetype6-dev libtiff-dev \
                  libjpeg-dev libopenjp2-7-dev libwebp-dev zlib1g-dev libpq-dev \
                  tesseract-ocr tesseract-ocr-all

            - name: Install node and npm
              uses: actions/setup-node@v4
              with:
                  node-version: '18'

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                  python-version: '3.12'
                  architecture: 'x64'
                  cache: 'pipenv'

            - name: Display Python version
              run: python -c "import sys; print(sys.version)"

            - name: Install Python Dependencies
              run: |
                  python3 -m pip install --upgrade pip
                  pip3 install -U packaging
                  pip3 install -U setuptools
                  pip3 install -U pipenv
                  pipenv install --dev --deploy
                  pipenv install tblib # For parallel test debugging

            - name: Install Node Dependencies and Add .bin to Path
              run: |
                  npm install
                  echo "PATH=$PWD/node_modules/.bin:$PATH" >> $GITHUB_ENV

            - name: Configure Logs
              run: |
                  mkdir logs
                  touch ./logs/concordia-celery.log

            - name: Build and Collect Static Files
              run: |
                  npx gulp build
                  pipenv run ./manage.py collectstatic --no-input

            - name: Install Chrome for Testing and Set Path
              run: |
                  chromepath=$(npx @puppeteer/browsers install chrome@latest)
                  chromepath=${chromepath#* }
                  echo "Chrome installed at: $chromepath"
                  $chromepath --version
                  chromepath=${chromepath%/chrome} # Remove the binary so we can add it to the PATH
                  # Update PATH for subsequent steps
                  echo "PATH=$chromepath:$PATH" >> $GITHUB_ENV

            - name: Run Tests with Coverage
              run: |
                  mkdir -p coverage_report
                  pipenv run coverage run --parallel-mode ./manage.py test --parallel auto
                  pipenv run coverage combine  # Merge results from parallel test workers
                  # Save full report to coverage_report/coverage.txt and just the total coverage percent to pr_coverage.txt
                  pipenv run coverage report | tee coverage_report/coverage.txt | grep 'TOTAL' | awk '{print $6}' > pr_coverage.txt
                  echo "Stored PR coverage:"
                  cat pr_coverage.txt  # Debugging output to verify correct storage
                  pipenv run coverage html
                  mv htmlcov coverage_report/html  # Move HTML report into a separate directory
              env:
                  PGPASSWORD: postgres
                  # The hostname used to communicate with the PostgreSQL service container
                  POSTGRES_HOST: localhost
                  # The default PostgreSQL port
                  POSTGRES_PORT: 5432
                  # COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}

            # Store coverage results if running on the release branch
            - name: Store Release Coverage (if running on release branch)
              if: github.ref == 'refs/heads/release'
              run: cp pr_coverage.txt coverage.txt

            # Cache coverage results if running on the release branch
            - name: Cache Release Coverage (if running on release branch)
              if: github.ref == 'refs/heads/release'
              uses: actions/cache@v4
              with:
                  path: coverage.txt
                  key: release-coverage

            # Upload full coverage report as an artifact
            - name: Upload Full Coverage Report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: coverage_report

            # Download the stored release branch coverage for PR comparison, if it exists
            - name: Restore Release Coverage (if running on PR)
              if: github.event_name == 'pull_request'
              uses: actions/cache@v4
              with:
                  path: coverage.txt
                  key: release-coverage
                  restore-keys: |
                      release-coverage

            # Compare PR coverage against stored release coverage
            - name: Compare Coverage (if running on PR)
              if: github.event_name == 'pull_request'
              run: |
                  echo "Reading PR coverage from pr_coverage.txt..."
                  cat pr_coverage.txt || echo "⚠️ ERROR: pr_coverage.txt not found or empty"
                  PR_COVERAGE=$(cat pr_coverage.txt)
                  if [ -z "$PR_COVERAGE" ]; then
                      echo "⚠️ ERROR: PR_COVERAGE is empty!"
                      PR_COVERAGE="N/A"
                  fi

                  echo "PR Coverage: $PR_COVERAGE"
                  if [ -f "coverage.txt" ]; then
                      RELEASE_COVERAGE=$(cat coverage.txt)
                      COMPARISON_AVAILABLE=true
                  else
                      COMPARISON_AVAILABLE=false
                      RELEASE_COVERAGE="N/A"
                  fi

                  if [ "$COMPARISON_AVAILABLE" = true ]; then
                      # Strip '%' from PR_COVERAGE and RELEASE_COVERAGE for numerical comparison
                      PR_COVERAGE_NUM=${PR_COVERAGE%\%}
                      RELEASE_COVERAGE_NUM=${RELEASE_COVERAGE%\%}
                      if (( $(echo "$PR_COVERAGE_NUM > $RELEASE_COVERAGE_NUM" | bc -l) )); then
                          CHANGE="🔼 Coverage increased (+$(echo "$PR_COVERAGE_NUM - $RELEASE_COVERAGE_NUM" | bc -l)%)!"
                      elif (( $(echo "$PR_COVERAGE_NUM < $RELEASE_COVERAGE_NUM" | bc -l) )); then
                          CHANGE="🔽 Coverage decreased (-$(echo "$RELEASE_COVERAGE_NUM - $PR_COVERAGE_NUM" | bc -l)%)!"
                      else
                          CHANGE="✅ Coverage remained the same."
                      fi
                  else
                      CHANGE="⚠️ No baseline coverage available from 'release' branch."
                  fi

                  echo "COVERAGE_CHANGE=$CHANGE" >> $GITHUB_ENV
                  printf "RELEASE_COVERAGE=%s\n" "$RELEASE_COVERAGE" >> $GITHUB_ENV
                  printf "PR_COVERAGE=%s\n" "$PR_COVERAGE" >> $GITHUB_ENV

            # Generate and store command for display on the Action UI and PR (if any)
            - name: Generate Coverage Report Comment
              run: |
                  echo "**🛡 Test Coverage Report 🛡**" > coverage_comment.txt
                  echo "- **Current PR Coverage:** ${{ env.PR_COVERAGE }}" >> coverage_comment.txt
                  echo "- **Release Branch Coverage:** ${{ env.RELEASE_COVERAGE }}" >> coverage_comment.txt
                  echo "- **${{ env.COVERAGE_CHANGE }}**" >> coverage_comment.txt
                  echo "- 📊 **[Download Full Coverage Report (Under "Artifacts")](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)**" >> coverage_comment.txt
                  echo "" >> coverage_comment.txt
                  echo "<details>" >> coverage_comment.txt
                  echo "<summary>📜 Click to view full text coverage report</summary>" >> coverage_comment.txt
                  echo "" >> coverage_comment.txt
                  echo '```text' >> coverage_comment.txt
                  cat coverage_report/coverage.txt >> coverage_comment.txt
                  echo '```' >> coverage_comment.txt
                  echo "</details>" >> coverage_comment.txt

            # Display the coverage summary in the GitHub Actions UI
            - name: Post Coverage Summary
              run: cat coverage_comment.txt >> $GITHUB_STEP_SUMMARY

            # Post a comment on the PR with the coverage results
            - name: Comment Coverage Change on PR
              if: github.event_name == 'pull_request'
              uses: mshick/add-pr-comment@v2
              with:
                  message-path: coverage_comment.txt
