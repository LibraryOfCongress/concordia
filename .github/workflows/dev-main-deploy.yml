name: 'Deploy'

on:
    workflow_dispatch:
    push:
        branches: [main]
    # schedule:
    #     - cron: "*/15 * * * *"

env:
    AWS_REGION: us-east-1

permissions:
    id-token: write
    contents: read

jobs:
    deploy:
        name: Deploy to Dev
        runs-on: ubuntu-latest

        steps:
            - name: Install system packages
              run: |
                  sudo apt-get install -qy libmemcached-dev libz-dev libfreetype6-dev libtiff-dev \
                    libjpeg-dev libopenjp2-7-dev libwebp-dev zlib1g-dev libpq-dev

            - name: Install node and npm
              uses: actions/setup-node@v3
              with:
                  node-version: '12'

            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Python 3.10
              uses: actions/setup-python@v4
              with:
                  # Semantic version range syntax or exact version of a Python version
                  python-version: '3.10'
                  # Optional - x64 or x86 architecture, defaults to x64
                  architecture: 'x64'

            - name: Initialize venv install Dependencies
              id: python-build
              run: |
                  python3 -m venv venv-1
                  source venv-1//bin/activate
                  python3 -m pip install --upgrade pip
                  pip3 install -U packaging
                  pip3 install -U setuptools
                  pip3 install -U pipenv

                  pipenv install --dev --system --deploy

                  FULL_VERSION_NUMBER="$(python3 setup.py --version)"
                  echo "version_number=$(echo "${FULL_VERSION_NUMBER}" | cut -d '+' -f 1)" >> $GITHUB_ENV

                  python3 setup.py build

            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}
                  role-session-name: github_to_aws_deploy

            # Temporary test - hello from AWS: WhoAmI
            - name: Sts GetCallerIdentity
              run: |
                  aws sts get-caller-identity
                  echo "version number: " ${{ env.version_number }}

            # - name: Login to Amazon ECR
            #   id: login-ecr
            #   uses: aws-actions/amazon-ecr-login@v1

            # - name: Build, tag and push docker images ECR
            #   env:
            #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            #     IMAGE_TAG: ${{ github.sha }}
            #   run: |
            #     docker build -t concordia .
            #     docker tag concordia:latest $REGISTRY/concordia:${VERSION_NUMBER}
            #     docker tag concordia:latest $REGISTRY/concordia:${TAG}
            #     docker push $REGISTRY/concordia:${VERSION_NUMBER}
            #     docker push $REGISTRY/concordia:${TAG}

            #     docker build -t concordia/importer --file importer/Dockerfile .
            #     docker tag concordia/importer:latest $REGISTRY/concordia/importer:${VERSION_NUMBER}
            #     docker tag concordia/importer:latest $REGISTRY/concordia/importer:${TAG}
            #     docker push $REGISTRY/concordia/importer:${VERSION_NUMBER}
            #     docker push $REGISTRY/concordia/importer:${TAG}

            #     docker build -t concordia/celerybeat --file celerybeat/Dockerfile .
            #     docker tag concordia/celerybeat:latest $REGISTRY/concordia/celerybeat:${VERSION_NUMBER}
            #     docker tag concordia/celerybeat:latest $REGISTRY/concordia/celerybeat:${TAG}
            #     docker push $REGISTRY/concordia/celerybeat:${VERSION_NUMBER}
            #     docker push $REGISTRY/concordia/celerybeat:${TAG}

            #     TARGET_SERVICE="$(aws ecs list-services --cluster crowd-dev | python -c 'import json,sys;serviceInput=json.load(sys.stdin);serviceArns=serviceInput["serviceArns"];print(serviceArns[0])')"
            #     aws ecs update-service --region ${{ env.AWS_REGION }} --force-new-deployment --cluster crowd-dev --service $TARGET_SERVICE
