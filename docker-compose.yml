### Before running any Compose services, make sure you have an .env file
# inside your current folder and that it has been populated with the following content:
#   CONCORDIA_ADMIN_PW=<concordia-admin-pw>
#   POSTGRESQL_PW=<postgres-pw>
#   EMAIL_HOST=<your_smtp_email_host_here>
#   EMAIL_HOST_USER=<your_smtp_email_host_user_here>
#   EMAIL_HOST_PASSWORD=<your_smtp_email_host_password_here>
#   DEFAULT_FROM_EMAIL=<your_email_from_address_here>
#   AWS_ACCESS_KEY_ID=<Refer_confluence_page>
#   AWS_SECRET_ACCESS_KEY=<Refer_confluence_page>
#   AWS_REGION=us-east-2

### Start Docker containers with the following command :
#  sudo make up

version: '3.6'
services:
  db:
    image: postgres
    env_file: ./.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRESQL_PW}
      POSTGRES_USER: concordia
    ports:
      - 54323:5432
    volumes:
      - ./postgresql:/docker-entrypoint-initdb.d
      - db_volume:/var/lib/postgresl/data/
    environment:
        - POSTGRES_MULTIPLE_DATABASES=concordia

  rabbit:
    hostname: rabbit
    image: rabbitmq:latest
    ports:
      - 5672:5672
      - 15672:15672
      
  app:
    env_file: ./.env
    build: .
    environment:
      # The concordia app needs to wait for the db to completely start. Use docker-compose-wait
      # as defined at https://github.com/ufoscout/docker-compose-wait
      WAIT_HOSTS: db:5432
      POSTGRESQL_HOST: db
    depends_on:
      - db
    volumes:
      - .:/app
      - images_volume:/concordia_images
    links:
      - rabbit

    ports:
      - 80:80

  importer:
    build:
       context: .
       dockerfile: importer/Dockerfile
    environment:
      POSTGRESQL_HOST: db
    depends_on:
      - rabbit
      - db
    volumes:
      - images_volume:/concordia_images

volumes:
  db_volume:
  images_volume:
