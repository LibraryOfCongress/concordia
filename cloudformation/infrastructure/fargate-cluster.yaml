Description: >
    This template deploys a fargate cluster to the provided VPC and subnets

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    PublicSubnets:
        Description: The subnets for the load balancer
        Type: List<AWS::EC2::Subnet::Id>

    PrivateSubnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    LoadBalancerSecurityGroup:
        Description: The SecurityGroup for load balancer
        Type: AWS::EC2::SecurityGroup::Id

    VpcId:
        Description: The Id of the VPC for this cluster
        Type: AWS::EC2::VPC::Id

    ConcordiaVersion:
        Type: String
        Description: version of concordia docker images to pull and deploy
        Default: latest

    DjangoKeyId:
        Type: String
        Description: unique ID appended to end of DjangoSecretKey ARN in secrets manager
        Default: xxxxx

    DbSecretId:
        Type: String
        Description: unique ID appended to end of DB password ARN in secrets manager
        Default: xxxxx

    EnvName:
        Type: String
        Description: which environment to target
        AllowedValues:
            - 'dev'
            - 'test'
            - 'stage'
            - 'prod'
            - 'cftest2'
        ConstraintDescription: Must match a location for secret storage in secretsmanager

    FullEnvironmentName:
        Type: String
        Description: Full name of deployment environment
        AllowedValues:
            - 'development'
            - 'test'
            - 'staging'
            - 'production'

    RedisAddress:
        Type: String
        Description: Redis endpoint address

    RedisPort:
        Type: String
        Description: Redis endpoint port

    CanonicalHostName:
        Type: String
        Description: canonical host name of the application, e.g. crowd-test.loc.gov

    DatabaseEndpoint:
        Type: String
        Description: Host name of the Postgres RDS service

    S3BucketName:
        Type: String
        Description: name of the S3 bucket (public) where collection images will be stored

    ExportS3BucketName:
        Type: String
        Description: name of the S3 bucket (public) where exported transcriptions will be stored

Resources:
    ConcordiaS3BucketAccessPolicy:
        UpdateReplacePolicy: Retain
        Type: AWS::IAM::Policy
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W12
                      reason: 'S3 buckets must be specified with /* after the bucket name'
        DeletionPolicy: Retain
        Properties:
            PolicyName: !Sub ConcordiaServiceS3BucketAccess-${EnvironmentName}
            Roles:
                - !Ref 'ConcordiaTaskRole'
                - !Ref 'ConcordiaEC2Role'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action:
                          - 's3:PutObject'
                          - 's3:GetObject'
                          - 's3:AbortMultipartUpload'
                          - 's3:ListMultipartUploadParts'
                          - 's3:ListBucket'
                          - 's3:ListBucketMultipartUploads'
                      Resource:
                          - !Sub 'arn:aws:s3:::crowd-${EnvironmentName}-content/*'
                          - !Sub 'arn:aws:s3:::crowd-${EnvironmentName}-export/*'

    ConcordiaKMSAccessPolicy:
        UpdateReplacePolicy: Retain
        Type: AWS::IAM::Policy
        DeletionPolicy: Retain
        Properties:
            PolicyName: !Sub ConcordiaServiceKMSAccess-${EnvironmentName}
            Roles:
                - !Ref 'ConcordiaTaskRole'
                - !Ref 'ConcordiaEC2Role'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action:
                          - 'kms:GetParametersForImport'
                          - 'kms:GetKeyRotationStatus'
                          - 'kms:GetKeyPolicy'
                          - 'kms:DescribeKey'
                          - 'kms:ListResourceTags'
                          - 'kms:Decrypt'
                          - 'kms:GenerateDataKey'
                      Resource:
                          - 'arn:aws:kms:us-east-1:619333082511:key/d300e73d-9170-4001-933a-37af0bcdb956'

    ConcordiaServiceSecretAccessPolicy:
        UpdateReplacePolicy: Retain
        Type: AWS::IAM::Policy
        DeletionPolicy: Retain
        Properties:
            PolicyName: !Sub ConcordiaServiceSecretAccess-${EnvironmentName}
            Roles:
                - !Ref 'ConcordiaTaskRole'
                - !Ref 'ConcordiaEC2Role'
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action:
                          - 'secretsmanager:GetResourcePolicy'
                          - 'secretsmanager:GetSecretValue'
                          - 'secretsmanager:DescribeSecret'
                          - 'secretsmanager:ListSecretVersionIds'
                      Resource:
                          - 'arn:aws:secretsmanager:us-east-1:619333082511:secret:concordia/SMTP-GVlolk'
                          - !Sub 'arn:aws:secretsmanager:us-east-1:619333082511:secret:crowd/${EnvName}/Django/SecretKey-${DjangoKeyId}'
                          - !Sub 'arn:aws:secretsmanager:us-east-1:619333082511:secret:crowd/${EnvName}/DB/MasterUserPassword-${DbSecretId}'

    ConcordiaEC2Role:
        UpdateReplacePolicy: Retain
        Type: AWS::IAM::Role
        DeletionPolicy: Retain
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ec2.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    ConcordiaInstanceProfile:
        UpdateReplacePolicy: Retain
        Type: AWS::IAM::InstanceProfile
        DeletionPolicy: Retain
        Properties:
            Path: /
            Roles:
                - !Ref 'ConcordiaEC2Role'

    ConcordiaTaskRole:
        UpdateReplacePolicy: Retain
        Type: AWS::IAM::Role
        DeletionPolicy: Retain
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: ecs-tasks.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    ConcordiaAppLogsGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::Logs::LogGroup
        DeletionPolicy: Retain
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30

    ConcordiaExternalTargetGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        DeletionPolicy: Retain
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /healthz
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 10
            TargetType: ip
            Port: 80
            Protocol: HTTP
            VpcId: !Ref VpcId

    LoadBalancer:
        UpdateReplacePolicy: Retain
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        DeletionPolicy: Retain
        Properties:
            Subnets: !Ref PublicSubnets
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup

    ExternalLoadBalancerListener:
        UpdateReplacePolicy: Retain
        DeletionPolicy: Retain
        Properties:
            DefaultActions:
                # FIXME: When AWS CF supports it, redirect to https
                # instead of forward to target group
                - TargetGroupArn: !Ref ConcordiaExternalTargetGroup
                  Type: forward
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP
        Type: AWS::ElasticLoadBalancingV2::Listener

    SecureExternalLoadBalancerListener:
        UpdateReplacePolicy: Retain
        DeletionPolicy: Retain
        Properties:
            Certificates:
                - CertificateArn: !Sub 'arn:aws:iam::${AWS::AccountId}:server-certificate/${CanonicalHostName}'
            DefaultActions:
                - TargetGroupArn: !Ref ConcordiaExternalTargetGroup
                  Type: forward
            LoadBalancerArn: !Ref LoadBalancer
            Port: 443
            Protocol: HTTPS
        Type: AWS::ElasticLoadBalancingV2::Listener

    ECSCluster:
        UpdateReplacePolicy: Retain
        Type: AWS::ECS::Cluster
        DeletionPolicy: Retain
        Properties:
            ClusterName: !Ref EnvironmentName

    ConcordiaTask:
        UpdateReplacePolicy: Retain
        Type: AWS::ECS::TaskDefinition
        DeletionPolicy: Retain
        Properties:
            Family: !Sub crowd-${EnvName}
            Cpu: '4096'
            Memory: '16384'
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - FARGATE
            ExecutionRoleArn: !GetAtt ConcordiaTaskRole.Arn
            TaskRoleArn: !GetAtt ConcordiaTaskRole.Arn
            Volumes:
                - Name: images_volume
            ContainerDefinitions:
                - Name: app
                  Cpu: 2048
                  Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/concordia:${ConcordiaVersion}'
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref 'ConcordiaAppLogsGroup'
                          awslogs-region: !Ref 'AWS::Region'
                          awslogs-stream-prefix: ConcordiaServer
                  Environment:
                      - Name: AWS
                        Value: '1'
                      - Name: ENV_NAME
                        Value: !Ref EnvName
                      - Name: CONCORDIA_ENVIRONMENT
                        Value: !Ref FullEnvironmentName
                      - Name: S3_BUCKET_NAME
                        Value: !Ref S3BucketName
                      - Name: EXPORT_S3_BUCKET_NAME
                        Value: !Ref ExportS3BucketName
                      - Name: CELERY_BROKER_URL
                        Value: !Sub 'redis://${RedisAddress}:${RedisPort}/0'
                      - Name: AWS_DEFAULT_REGION
                        Value: !Ref AWS::Region
                      - Name: SENTRY_BACKEND_DSN
                        Value: https://6727341eabcd47e3a48ce300432e840b@errorlogging.loc.gov/5
                      - Name: SENTRY_FRONTEND_DSN
                        Value: https://77a13a941ffd485dbf41dbf8e7a0bdd0@errorlogging.loc.gov/4
                      - Name: REDIS_ADDRESS
                        Value: !Ref RedisAddress
                      - Name: REDIS_PORT
                        Value: !Ref RedisPort
                      - Name: POSTGRESQL_HOST
                        Value: !Ref DatabaseEndpoint
                      - Name: HOST_NAME
                        Value: !Ref CanonicalHostName
                      - Name: DJANGO_SETTINGS_MODULE
                        Value: concordia.settings_ecs
                  MountPoints:
                      - SourceVolume: images_volume
                        ContainerPath: /concordia_images
                  PortMappings:
                      - ContainerPort: 80
                - Name: importer
                  Cpu: 1024
                  Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/concordia/importer:${ConcordiaVersion}'
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref 'ConcordiaAppLogsGroup'
                          awslogs-region: !Ref 'AWS::Region'
                          awslogs-stream-prefix: ConcordiaWorker
                  Environment:
                      - Name: AWS
                        Value: '1'
                      - Name: ENV_NAME
                        Value: !Ref EnvName
                      - Name: CONCORDIA_ENVIRONMENT
                        Value: !Ref FullEnvironmentName
                      - Name: S3_BUCKET_NAME
                        Value: !Ref S3BucketName
                      - Name: EXPORT_S3_BUCKET_NAME
                        Value: !Ref ExportS3BucketName
                      - Name: CELERY_BROKER_URL
                        Value: !Sub 'redis://${RedisAddress}:${RedisPort}/0'
                      - Name: AWS_DEFAULT_REGION
                        Value: !Ref AWS::Region
                      - Name: SENTRY_BACKEND_DSN
                        Value: https://6727341eabcd47e3a48ce300432e840b@errorlogging.loc.gov/5
                      - Name: SENTRY_FRONTEND_DSN
                        Value: https://77a13a941ffd485dbf41dbf8e7a0bdd0@errorlogging.loc.gov/4
                      - Name: REDIS_ADDRESS
                        Value: !Ref RedisAddress
                      - Name: REDIS_PORT
                        Value: !Ref RedisPort
                      - Name: POSTGRESQL_HOST
                        Value: !Ref DatabaseEndpoint
                      - Name: HOST_NAME
                        Value: !Ref CanonicalHostName
                      - Name: DJANGO_SETTINGS_MODULE
                        Value: concordia.settings_ecs
                  MountPoints:
                      - SourceVolume: images_volume
                        ContainerPath: /concordia_images
                - Name: celerybeat
                  Cpu: 1024
                  Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/concordia/celerybeat:${ConcordiaVersion}'
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref 'ConcordiaAppLogsGroup'
                          awslogs-region: !Ref 'AWS::Region'
                          awslogs-stream-prefix: ConcordiaWorker
                  Environment:
                      - Name: AWS
                        Value: '1'
                      - Name: ENV_NAME
                        Value: !Ref EnvName
                      - Name: CONCORDIA_ENVIRONMENT
                        Value: !Ref FullEnvironmentName
                      - Name: S3_BUCKET_NAME
                        Value: !Ref S3BucketName
                      - Name: EXPORT_S3_BUCKET_NAME
                        Value: !Ref ExportS3BucketName
                      - Name: CELERY_BROKER_URL
                        Value: !Sub 'redis://${RedisAddress}:${RedisPort}/0'
                      - Name: AWS_DEFAULT_REGION
                        Value: !Ref AWS::Region
                      - Name: SENTRY_BACKEND_DSN
                        Value: https://6727341eabcd47e3a48ce300432e840b@errorlogging.loc.gov/5
                      - Name: SENTRY_FRONTEND_DSN
                        Value: https://77a13a941ffd485dbf41dbf8e7a0bdd0@errorlogging.loc.gov/4
                      - Name: REDIS_ADDRESS
                        Value: !Ref RedisAddress
                      - Name: REDIS_PORT
                        Value: !Ref RedisPort
                      - Name: POSTGRESQL_HOST
                        Value: !Ref DatabaseEndpoint
                      - Name: HOST_NAME
                        Value: !Ref CanonicalHostName
                      - Name: DJANGO_SETTINGS_MODULE
                        Value: concordia.settings_ecs

    ConcordiaExternalService:
        UpdateReplacePolicy: Retain
        Type: AWS::ECS::Service
        DependsOn: ExternalLoadBalancerListener
        DeletionPolicy: Retain
        Properties:
            Cluster: !Ref ECSCluster
            LaunchType: FARGATE
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 75
            DesiredCount: 1
            NetworkConfiguration:
                AwsvpcConfiguration:
                    SecurityGroups:
                        - !Ref SecurityGroup
                    Subnets: !Ref PrivateSubnets
            TaskDefinition: !Ref ConcordiaTask
            LoadBalancers:
                - ContainerName: 'app'
                  ContainerPort: 80
                  TargetGroupArn: !Ref ConcordiaExternalTargetGroup

Outputs:
    LoadBalancerUrl:
        Description: The URL of the ALB
        Value: !GetAtt LoadBalancer.DNSName
