Description: >
    This template contains the security groups required by our entire stack.
    We create them in a seperate nested template, so they can be referenced
    by all of the other nested templates.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Type: AWS::EC2::VPC::Id
        Description: Choose which VPC the security groups should be deployed to

Resources:
    # This security group defines who/where is allowed to access the ECS hosts directly.
    # By default we're just allowing access from the load balancer.  If you want to SSH
    # into the hosts, or expose non-load balanced services you can open their ports here.
    ECSHostSecurityGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::EC2::SecurityGroup
        DeletionPolicy: Retain
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
            SecurityGroupIngress:
                - Description: 'Open access to container hosts from the load balancer'
                  SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
                  IpProtocol: '-1'
                - Description: 'SSH access to container hosts from bastion hosts'
                  SourceSecurityGroupId: !Ref BastionHostSecurityGroup
                  IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
            SecurityGroupEgress:
                - Description: 'Explicit outbound access'
                  IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0

            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-ECS-Hosts

    LoadBalancerSecurityGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::EC2::SecurityGroup
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W9
                      reason: 'The CIDR block should only allow 140.147.*.* IPs so it should end in /16'
        DeletionPolicy: Retain
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the load balancer that sits in front of ECS
            SecurityGroupIngress:
                - Description: 'Allow HTTP access from the LC network to our ECS services'
                  CidrIp: 140.147.0.0/16
                  IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                - Description: 'Allow HTTPS access from the LC network to our ECS services'
                  CidrIp: 140.147.0.0/16
                  IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
            SecurityGroupEgress:
                - Description: 'Explicit outbound access'
                  IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-LoadBalancers
                - Key: AllowCloudFlareIngress
                  Value: 'true'

    DatabaseSecurityGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::EC2::SecurityGroup
        DeletionPolicy: Retain
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the RDS Postgres database
            SecurityGroupIngress:
                - Description: 'Postgresql access to RDS from container hosts'
                  SourceSecurityGroupId: !Ref ECSHostSecurityGroup
                  IpProtocol: tcp
                  FromPort: 5432
                  ToPort: 5432
            SecurityGroupEgress:
                - Description: 'Explicit outbound access'
                  IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0

    BastionHostSecurityGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::EC2::SecurityGroup
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    - id: W9
                      reason: 'The CIDR block should only allow 140.147.*.* IPs so it should end in /16'
        DeletionPolicy: Retain
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Bastion hosts for ECS access
            SecurityGroupIngress:
                - Description: 'SSH access from LC network to bastion hosts'
                  CidrIp: 140.147.0.0/16
                  IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
            SecurityGroupEgress:
                - Description: 'Explicit outbound access'
                  IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-BastionHosts

    CacheServiceSecurityGroup:
        UpdateReplacePolicy: Retain
        Type: AWS::EC2::SecurityGroup
        DeletionPolicy: Retain
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to cache services for ECS hosts
            SecurityGroupIngress:
                - Description: 'Redis service access from container hosts'
                  SourceSecurityGroupId: !Ref 'ECSHostSecurityGroup'
                  IpProtocol: tcp
                  FromPort: 6379
                  ToPort: 6379
            SecurityGroupEgress:
                - Description: 'Explicit outbound access'
                  IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0

Outputs:
    ECSHostSecurityGroup:
        Description: A reference to the security group for ECS hosts
        Value: !Ref ECSHostSecurityGroup

    LoadBalancerSecurityGroup:
        Description: A reference to the security group for load balancers
        Value: !Ref LoadBalancerSecurityGroup

    DatabaseSecurityGroup:
        Description: A reference to the security group for RDS
        Value: !Ref DatabaseSecurityGroup

    BastionHostSecurityGroup:
        Description: A reference to the security group for bastion hosts
        Value: !Ref BastionHostSecurityGroup

    CacheServiceSecurityGroup:
        Description: A reference to the security group for cache services
        Value: !Ref CacheServiceSecurityGroup
