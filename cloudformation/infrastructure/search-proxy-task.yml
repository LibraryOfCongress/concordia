Description: >
    This template deploys a kibana/opensearch dashboard proxy server to the specified VPC

Parameters:
    VpcId:
        Description: The Id of the VPC for this cluster
        Type: AWS::EC2::VPC::Id

    EnvName:
        Type: String
        Description: which environment to target
        AllowedValues:
            - 'dev'
            - 'test'
            - 'stage'
            - 'prod'
        ConstraintDescription: Must match a location for secret storage in secretsmanager

    Priority:
        Type: Number
        Description: Priority of the subdomain listener rule, must be unique in the set of listener rules
        Default: 100

Mappings:
    EnvironmentMapping:
        ListenerArn:
            dev: 'arn:aws:elasticloadbalancing:us-east-1:619333082511:listener/app/crowd-dev/112d22a79e25de0b/8bb4cb9c8b054e91'
            test: 'arn:aws:elasticloadbalancing:us-east-1:619333082511:listener/app/crowd-test/81e4820e354ea810/187fd94e534ad833'
            stage: 'arn:aws:elasticloadbalancing:us-east-1:619333082511:listener/app/crowd-stage/7d954bca84b62358/ab34414a68f355f2'
            prod: 'arn:aws:elasticloadbalancing:us-east-1:619333082511:listener/app/crowd-prod/746d0ae14ecc23e4/747212dd4e5706be'

        TaskRoleArn:
            dev: 'arn:aws:iam::619333082511:role/ConcordiaServerTaskRole-crowd-dev'
            test: 'arn:aws:iam::619333082511:role/ConcordiaServerTaskRole-crowd-test'
            stage: 'arn:aws:iam::619333082511:role/ConcordiaServerTaskRole-crowd-stage'
            prod: 'arn:aws:iam::619333082511:role/ConcordiaServerTaskRole-crowd-prod'

        # The ID of a private subnet
        # Type: AWS::EC2::Subnet::Id
        PrivateSubnet1:
            dev: subnet-0c95a830ce007fa65
            test: subnet-0aa55b322229b945a
            stage: subnet-0f7c7d66b66d6dd90
            prod: subnet-0da84976b66c32ce4

        OpensearchEndpoint:
            dev: 'https://vpc-crowd-dev-vpc-6xqqrxn5naqkvtdl6r6uanlhbe.us-east-1.es.amazonaws.com'
            test: 'https://vpc-crowd-test-vpc-63g3ylzduyzywhqbsqotnnm7ke.us-east-1.es.amazonaws.com'
            stage: 'https://vpc-crowd-stage-vpc-x5lgoj5yo76dvrxpfhmusss2b4.us-east-1.es.amazonaws.com'
            prod: 'https://vpc-crowd-prod-vpc-zl5xdhmtpr7squr6mtl7znqyqa.us-east-1.es.amazonaws.com'

        # The security group
        # Type: AWS::EC2::SecurityGroup::Id
        SecurityGroup:
            dev: sg-0ceb6b1dc0de899b3
            test: sg-09bc01194e6c52cb9
            stage: sg-0f6145067777b1cc3
            prod: sg-031594e2cfc8b25c7

Resources:
    DashboardLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30

    DashboardTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 10
            TargetType: ip
            Port: 80
            Protocol: HTTP
            VpcId: !Ref VpcId

    SubdomainListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - TargetGroupArn: !Ref DashboardTargetGroup
                  Type: forward
            Conditions:
                - Field: path-pattern
                  Values:
                      - '/_dashboards*'
            ListenerArn:
                Fn::FindInMap:
                    - EnvironmentMapping
                    - ListenerArn
                    - Ref: EnvName
            Priority: !Ref Priority

    DashboardTask:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Sub crowd-${EnvName}-searchproxy
            Cpu: '256'
            Memory: '512'
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - FARGATE
            ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
            TaskRoleArn:
                Fn::FindInMap:
                    - EnvironmentMapping
                    - TaskRoleArn
                    - Ref: EnvName
            ContainerDefinitions:
                - Name: searchproxy
                  Cpu: 256
                  Memory: 512
                  Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/concordia/search-proxy:latest'
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref 'DashboardLogsGroup'
                          awslogs-region: !Ref 'AWS::Region'
                          awslogs-stream-prefix: ConcordiaDashboardProxy
                  Environment:
                      - Name: OPENSEARCH_ENDPOINT
                        Value:
                            Fn::FindInMap:
                                - EnvironmentMapping
                                - OpensearchEndpoint
                                - Ref: EnvName
                  PortMappings:
                      - ContainerPort: 80

    DashboardService:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Sub crowd-${EnvName}
            LaunchType: FARGATE
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
            DesiredCount: 1
            NetworkConfiguration:
                AwsvpcConfiguration:
                    SecurityGroups:
                        - Fn::FindInMap:
                              - EnvironmentMapping
                              - SecurityGroup
                              - Ref: EnvName
                    Subnets:
                        - Fn::FindInMap:
                              - EnvironmentMapping
                              - PrivateSubnet1
                              - Ref: EnvName
            TaskDefinition: !Ref DashboardTask
            LoadBalancers:
                - ContainerName: 'searchproxy'
                  ContainerPort: 80
                  TargetGroupArn: !Ref DashboardTargetGroup
